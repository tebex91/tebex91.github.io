{"version":3,"sources":["components/query-panel/index.js","components/query-panel/query-panel.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/header/index.js","components/header/header.js","components/arrow-up/index.js","components/arrow-up/arrow-up.js","components/mdb-pages/main-page/collage.jpg","components/mdb-pages/main-page/main-page.js","actions/fetch-film-list.js","actions/update-selected-films-list.js","actions/fetch-film-details.js","actions/fetch-total-pages.js","actions/update-path.js","common-styles/default-poster.jpg","components/film-list-item/index.js","components/film-list-item/film-list-item.js","components/spinner/index.js","components/spinner/spinner.js","components/mdb-service-context/index.js","components/mdb-service-context/mdb-secvice-context.js","components/hoc/withMdbService.js","utils/compose.js","components/film-list/film-list.js","components/film-list/index.js","components/selected-list-item/index.js","components/selected-list-item/selected-list-item.js","components/selected-list/selected-list.js","components/mdb-pages/selected-page/selected-page.js","components/mdb-pages/index.js","components/film-details/film-details.js","components/film-details/index.js","components/app/index.js","components/app/app.js","components/error-indicator/error.png","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/error-boundary/index.js","components/error-boundary/error-boundary.js","reducers/film-list.js","reducers/film-details.js","reducers/query-buttons.js","reducers/selected-films.js","reducers/total-pages.js","reducers/index.js","store.js","index.js","services/mdb-service.js"],"names":["QueryPanel","connect","queryButtons","buttons","map","name","path","chosenClass","isChosen","to","className","SearchPanel","withRouter","history","useState","searchQuery","setSearchQuery","onSubmit","e","preventDefault","query","trim","replace","push","type","placeholder","value","onChange","target","Header","selectedFilms","fulfilledClass","length","aria-hidden","ArrowUp","yScroll","setYScroll","window","addEventListener","pageYOffset","visibleClass","document","documentElement","clientHeight","onClick","scrollTo","MainPage","src","collage","alt","fetchFilms","filmService","dispatch","func","page","then","data","payload","catch","err","deleteFilms","updateSelectedFilms","film","removeAllSelectedFilms","removeSelectedFilm","id","fetchDetails","getMovieDetails","fetchTotalPages","getTotalPages","pagesNum","totalPagesLoaded","totalPagesError","updateCurrentPath","FilmListItem","ratingClass","title","rating","poster","release","selectedClass","find","defaultPoster","Spinner","MdbServiceContext","React","createContext","withMdbService","Wrapped","props","mdbService","useContext","compose","funcs","comp","reduceRight","wrapped","f","FilmList","films","pageNum","updatePageNum","totalPages","items","btn","FilmListContainer","state","updateFilms","setState","this","prevProps","setTimeout","loading","list","listIsEmpty","spinner","message","Component","filmList","MarkedListItem","classList","contains","SelectedList","content","PopularPage","TopRatedPage","UpcomingPage","SearchPage","FilmDetails","tagline","revenue","budget","runtime","overview","genres","year","productionCountries","selectedClazz","FilmDetailsContainer","error","errorMessage","filmDetails","App","location","useEffect","pathname","exact","component","SelectedPage","render","match","params","ErrorIndicator","errorLogo","ErrorBoundary","hasError","children","updateFilmList","action","initialValue","undefined","updateFilmDetails","updateButton","arr","idx","slice","updateQueryButtons","oldItem","oldIdx","indexOf","clearArr","chosenItem","newIdx","removeFilm","selectedList","filmId","updateList","selectedFilm","updateTotalPages","getPopular","getTopRated","getUpcoming","getBySearch","includes","key","Object","keys","values","reducer","store","createStore","_apiBase","_apiBasePopular","_apiBaseTopRated","_apiBaseUpcoming","_apiBaseBySearch","_apiKey","_imgBase","getResource","url","a","fetch","res","ok","Error","status","json","getData","base","_getQueryUrl","results","_transformMovie","apiBase","total_pages","_transformMovieDetails","movie","vote_average","poster_path","release_date","_transformRating","_transformPoster","_transformDate","production_countries","_transformPropToString","toLowerCase","substring","date","split","reverse","join","Math","floor","ReactDOM","Provider","getElementById"],"mappings":"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","file":"static/js/main.b3096b56.chunk.js","sourcesContent":["import QueryPanel from './query-panel';\nexport default QueryPanel;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './query-panel.sass';\n\n\nconst QueryPanel = ({ queryButtons }) => {\n    const buttons = queryButtons.map(({ name, path, isChosen }) => {\n        const chosenClass = isChosen ? ' chosen' : '';\n        return <li key={path}>\n            <Link to={path} className={`query-btn${chosenClass}`}>\n                {name}</Link>\n        </li>\n    })\n    return (\n        <ul className=\"query-panel\">\n            {buttons}\n        </ul>\n    )\n}\n\nconst mapStateToProps = ({ queryButtons }) => {\n    return { queryButtons }\n}\n\nexport default connect(mapStateToProps)(QueryPanel);","import SearchPanel from './search-panel';\nexport default SearchPanel;","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './search-panel.sass';\n\nconst SearchPanel = ({ history }) => {\n    const [searchQuery, setSearchQuery] = useState('');\n\n    return (\n        <form className=\"search-panel\" onSubmit={ (e) => {\n            e.preventDefault();\n            const query = searchQuery.trim().replace(/ /g,\"+\");\n            if(!query) { return }\n            history.push(`/search&q=${query}`);\n            setSearchQuery('')}}>\n            <input\n                type=\"text\"\n                placeholder=\"find movie\"\n                value={ searchQuery }\n                onChange={(e) => {\n                    setSearchQuery(e.target.value);\n                }} />\n            <button type=\"submit\">go!</button>\n        </form>\n    )\n}\n\nexport default withRouter(SearchPanel);\n","import Header from './header';\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport QueryPanel from '../query-panel';\nimport SearchPanel from '../search-panel';\n\nimport './header.sass';\n\n\nconst Header = ({ selectedFilms }) => {\n    const fulfilledClass = selectedFilms.length > 0 ? ' fulfilled' : '';\n\n    return (\n        <div className=\"header\">\n            <div className=\"logo\">\n                <Link to='/' className=\"link\" >movieDB</Link>\n            </div>\n            <QueryPanel />\n            <Link to='/selected' className={`selected-label${fulfilledClass}`}>\n                <i className=\"fa fa-bookmark\" aria-hidden=\"true\" />\n            </Link>\n            <SearchPanel />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ selectedFilms }) => {\n    return { selectedFilms }\n}\n\nexport default connect(mapStateToProps)(Header);\n\n","import ArrowUp from './arrow-up';\nexport default ArrowUp;","import React, { useState } from 'react';\n\nimport './arrow-up.sass';\n\nconst ArrowUp = () => {\n    const [yScroll, setYScroll] = useState(0);\n\n    window.addEventListener('scroll', () => setYScroll(window.pageYOffset));\n    const screenHeight = document.documentElement.clientHeight;\n\n    const visibleClass = yScroll > screenHeight * 1.5 ? 'visible' : 'hidden';\n\n    return (\n        <div className={`arrow-up ${visibleClass}`}>\n            <i className=\"fa fa-angle-up\"\n               aria-hidden=\"true\"\n               onClick={() => window.scrollTo(0, 0) } />\n        </div>\n    )\n}\n\nexport default ArrowUp;","export default __webpack_public_path__ + \"static/media/collage.b7e4f821.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './main-page.sass';\nimport collage from './collage.jpg';\n\nconst MainPage = () => {\n    return (\n        <div className=\"main-page\">\n            <h1>welcome to the world of cinema</h1>\n            <Link to=\"/top_rated\">\n                <div className=\"collage\">\n                    <div className=\"shadow\" />\n                    <img src={collage} alt=\"collage\" />\n                </div>\n            </Link>\n        </div>\n    )\n}\n\nexport default MainPage;","const filmsRequest = () => {\n    return {\n        type: 'FETCH_FILMS_REQUEST'\n    }\n}\n\nconst filmsLoaded = (newFilms) => {\n    return {\n        type: 'FETCH_FILMS_SUCCESS',\n        payload: newFilms\n    }\n}\n\nconst filmsError = (error) => {\n    return {\n        type: 'FETCH_FILMS_FAILURE',\n        payload: error\n    }\n}\n\nconst fetchFilms = (filmService, dispatch) => (func, page, query) => {\n    dispatch(filmsRequest());\n    filmService[func](page, query)\n        .then(data => dispatch(filmsLoaded(data)))\n        .catch((err) => dispatch(filmsError(err)));\n}\n\n//очистить список фильмов после размонтирования компонента и перед новым запросом поиска\nconst deleteFilms = (dispatch) => () => {\n    dispatch({type: 'DELETE_FILMS'});\n}\n\nexport {\n    fetchFilms,\n    deleteFilms\n}","const updateSelectedFilms = (dispatch) => (film) => {\n    dispatch({\n        type: 'UPDATE_SELECTED_FILMS',\n        payload: film\n    })\n}\n\nconst removeAllSelectedFilms = (dispatch) => () => {\n    dispatch({\n        type: 'REMOVE_ALL_SELECTED_FILMS'\n    })\n}\n\nconst removeSelectedFilm = (dispatch) => (id) => {\n    dispatch({\n        type: 'REMOVE_SELECTED_FILM',\n        payload: id\n    })\n}\n\nexport {\n    updateSelectedFilms,\n    removeAllSelectedFilms,\n    removeSelectedFilm,\n}","const detailsRequest = () => {\n    return {\n        type: 'FETCH_DETAILS_REQUEST'\n    }\n}\n\nconst detailsLoaded = (newFilm) => {\n    return {\n        type: 'FETCH_DETAILS_SUCCESS',\n        payload: newFilm\n    }\n}\n\nconst detailsError = (error) => {\n    return {\n        type: 'FETCH_DETAILS_FAILURE',\n        payload: error\n    }\n}\n\nconst fetchDetails = (filmService, dispatch) => (id) => {\n    dispatch(detailsRequest());\n    filmService.getMovieDetails(id)\n        .then(data => dispatch(detailsLoaded(data)))\n        .catch((err) => dispatch(detailsError(err)));\n}\n\nexport {\n    fetchDetails\n}","const totalPagesLoaded = (pagesNum, func) => {\n    return {\n        type: 'FETCH_TOTAL_PAGES_SUCCESS',\n        payload: {[func]: pagesNum}\n    }\n}\n\nconst totalPagesError = (func) => {\n    return {\n        type: 'FETCH_TOTAL_PAGES_FAILURE',\n        payload: {[func]: null}\n    }\n}\n\nconst fetchTotalPages = (filmService, dispatch) => (func, query) => {\n    filmService.getTotalPages(func, query)\n        .then(data => {\n            dispatch(totalPagesLoaded(data, func))\n        })\n        .catch(() => dispatch(totalPagesError(func)));\n}\n\nexport {\n    fetchTotalPages\n}","const updateCurrentPath = (dispatch) => (path) => {\n    dispatch({\n        type: 'UPDATE_CURRENT_PATH',\n        payload: path\n    })\n}\n\nexport {\n    updateCurrentPath\n}","export default __webpack_public_path__ + \"static/media/default-poster.814942f2.jpg\";","import FilmListItem from './film-list-item';\nexport default FilmListItem;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateSelectedFilms } from '../../actions';\n\nimport './film-list-item.sass';\nimport defaultPoster from '../../common-styles/default-poster.jpg'\n\n\nconst FilmListItem = ({ film, selectedFilms, updateSelectedFilms }) => {\n    const { id, title, rating, poster, release } = film;\n    const elem = selectedFilms.find((film) => film.id === id);\n    const selectedClass = elem ? ' selected' : '';\n    let ratingClass;\n\n    if(rating === 'NR') {\n        ratingClass = ' gray';\n    } else if(rating < 5) {\n        ratingClass = ' red';\n    } else if(rating >= 5 && rating < 7) {\n        ratingClass = ' orange';\n    } else {\n        ratingClass = ' green';\n    }\n\n    return (\n        <div className=\"list-item\">\n            <div className={`rating${ratingClass}`}><span>{rating}</span></div>\n            <div className={`selected-label${selectedClass}`}\n                onClick={(e) => {\n                    e.preventDefault();\n                    updateSelectedFilms({title, rating, id})\n                }}>\n                <i className=\"fa fa-bookmark\" aria-hidden=\"true\" /></div>\n            <img src={poster || defaultPoster} alt=\"poster\" /> {/*возможно вынести определение пути постера в сервис*/}\n            <div className=\"info\">\n                <span className=\"title\">{title}</span>\n                <span className=\"release\">{release}</span>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ selectedFilms }) => {\n    return { selectedFilms }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateSelectedFilms: updateSelectedFilms(dispatch)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmListItem);","import Spinner from './spinner';\nexport default Spinner;","import React from 'react';\n\nimport './spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"loadingio-spinner-spin-v7axy9rx8za\">\n            <div className=\"ldio-74v56aqq5t5\">\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n                <div><div /></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Spinner;","import MdbServiceContext from './mdb-secvice-context';\nexport default MdbServiceContext;","import React from 'react';\n\nconst MdbServiceContext = React.createContext();\n\nexport default MdbServiceContext;\n","import React, { useContext } from 'react';\n\nimport MdbServiceContext from '../mdb-service-context';\n\nconst withMdbService = () => (Wrapped) => {\n    return (props) => {\n        const mdbService = useContext(MdbServiceContext);\n        return (<Wrapped {...props}\n                         mdbService = { mdbService } />)\n    }\n}\n\nexport default withMdbService;","const compose = (...funcs) => (comp) => {\n    return funcs.reduceRight(\n        (wrapped, f) => f(wrapped), comp);\n};\n\nexport default compose;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport FilmListItem from '../film-list-item';\nimport Spinner from '../spinner';\nimport { fetchFilms, fetchTotalPages, deleteFilms } from '../../actions';\nimport { withMdbService } from '../hoc';\nimport { compose } from '../../utils';\n\nimport './film-list.sass';\n\nconst FilmList = ({ films, func, fetchFilms, pageNum,\n                    updatePageNum, searchQuery, totalPages }) => {\n    const items = films.map((film) => {\n        const { id } = film;\n        return (\n            <li key={ id }>\n                <Link to={`/movie/${id}`} className=\"link\">\n                    <FilmListItem film={film} />\n                </Link>\n            </li>\n        )\n    });\n\n    const btn = (\n        <button className=\"show-more-btn\"\n            onClick={() => {\n            fetchFilms(func, pageNum, searchQuery);\n            updatePageNum();\n        }}>more</button>\n    );\n\n    return (\n        <div className=\"film-list\">\n            <ul>\n                { items }\n            </ul>\n            { totalPages[func] >= pageNum && items.length > 0 ? btn : null }\n        </div>\n    )\n}\n\nclass FilmListContainer extends Component {\n    state = {\n        pageNum: 1\n    }\n\n    componentDidMount() {\n        this.updateFilms();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.searchQuery !== prevProps.searchQuery) {\n            this.setState({pageNum: 1});\n            setTimeout(() => this.updateFilms());\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.deleteFilms();\n    }\n\n    updateFilms = () => {\n        const { func, fetchFilms, fetchTotalPages, searchQuery, deleteFilms } = this.props;\n        fetchFilms(func, this.state.pageNum, searchQuery);\n        fetchTotalPages(func, searchQuery);\n        this.updatePageNum();\n        deleteFilms();\n    }\n\n    updatePageNum = () => {\n        this.setState(({ pageNum }) => {\n            return { pageNum: pageNum + 1 }\n        })\n    }\n\n    render () {\n        const { loading, films, ...props } = this.props;\n        const list = <FilmList {...props}\n                               films={films}\n                               pageNum={this.state.pageNum}\n                               updatePageNum={this.updatePageNum} />;\n        const listIsEmpty = list.props.films.length === 0;\n        const spinner = loading && listIsEmpty ? <Spinner /> : null;\n        const message = listIsEmpty && !spinner ?\n                <p className=\"message\">no results for your query</p> :\n                null;\n        return (\n            <>\n                {spinner}\n                {message}\n                {list}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = ({ filmList: {films, loading}, totalPages }) => {\n    return {\n        films,\n        loading,\n        totalPages\n    }\n};\n\nconst mapDispatchToProps = (dispatch, { mdbService }) => {\n    return {\n        fetchFilms: fetchFilms(mdbService, dispatch),\n        fetchTotalPages: fetchTotalPages(mdbService, dispatch),\n        deleteFilms: deleteFilms(dispatch)\n    }\n}\n\nexport default compose(\n    withRouter,\n    withMdbService(),\n    connect(mapStateToProps, mapDispatchToProps)\n)(FilmListContainer);","import FilmList from './film-list';\nexport default FilmList;","import MarkedListItem from './selected-list-item';\nexport default MarkedListItem;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport { removeSelectedFilm } from '../../actions';\nimport { compose } from '../../utils';\n\nimport './selected-list-item.sass';\n\nconst SelectedListItem = ({ history, film, removeSelectedFilm }) => {\n    const { id, title, rating } = film;\n    return (\n        <div className=\"selected-list-item\"\n             onClick={(e) => {\n                 if(!e.target.classList.contains('fa-trash-o')) {\n                     history.push(`/movie/${id}`);\n                 }\n             }}>\n            <div className=\"rating\">{rating}</div>\n            <div className=\"title\">{title}</div>\n            <div className=\"trash\"><i className=\"fa fa-trash-o\"\n                                       aria-hidden=\"true\"\n                                       onClick={() => removeSelectedFilm(id)} /></div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeSelectedFilm: removeSelectedFilm(dispatch)\n    }\n}\n\nexport default compose(\n    withRouter,\n    connect(null, mapDispatchToProps)\n)(SelectedListItem);","import React from 'react';\n\nimport MarkedListItem from '../selected-list-item';\n\nimport './selected-list.sass';\n\nconst SelectedList = ({ selectedFilms }) => {\n    const items = selectedFilms.map((film) => {\n        return <li key={film.id}>\n            <MarkedListItem film={film} />\n        </li>\n    })\n\n    return (\n        <ul className=\"selected-list\">\n            {items}\n        </ul>\n    )\n}\n\n\nexport default SelectedList;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { removeAllSelectedFilms } from '../../../actions';\n\nimport SelectedList from '../../selected-list/selected-list';\n\nimport './selected-page.sass'\n\nconst SelectedPage = ({ selectedFilms, removeAllSelectedFilms }) => {\n    const message = <p className=\"message\">there is no one selected film yet</p>\n    const btn = (\n        <button\n            onClick={() => removeAllSelectedFilms() }>\n            remove all</button>\n    );\n    const content = (\n        <div className=\"content\">\n            <SelectedList selectedFilms={selectedFilms} />\n            {selectedFilms.length > 1 ? btn : null}\n        </div>\n    );\n\n    return (\n        <div className=\"selected-page\">\n            {selectedFilms.length > 0 ? content : message}\n        </div>\n    );\n}\n\nconst MapStateToProps = ({ selectedFilms }) => {\n    return { selectedFilms };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeAllSelectedFilms: removeAllSelectedFilms(dispatch)\n    }\n}\n\nexport default connect(MapStateToProps, mapDispatchToProps)(SelectedPage);","import React from 'react';\n\nimport MainPage from './main-page/main-page';\nimport FilmList from '../film-list';\nimport SelectedPage from './selected-page/selected-page';\n\nconst PopularPage = () => <FilmList func='getPopular' />;\nconst TopRatedPage = () => <FilmList func='getTopRated' />;\nconst UpcomingPage = () => <FilmList func='getUpcoming' />;\nconst SearchPage = ({searchQuery}) => <FilmList func='getBySearch' searchQuery={searchQuery} />\n\nexport {\n    MainPage,\n    PopularPage,\n    TopRatedPage,\n    UpcomingPage,\n    SearchPage,\n    SelectedPage\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { withMdbService } from '../hoc';\nimport { compose } from '../../utils';\nimport { fetchDetails, updateSelectedFilms } from '../../actions';\nimport Spinner from '../spinner';\n\nimport './film-details.sass';\nimport defaultPoster from \"../../common-styles/default-poster.jpg\"\n\nconst FilmDetails = ({ film, selectedFilms, updateSelectedFilms }) => {\n    const { id, title, tagline, revenue, budget, runtime, overview, rating,\n        genres, year, productionCountries, poster } = film;\n    const elem = selectedFilms.find((film) => film.id === id);\n    const clazz = 'selected-label';\n    const selectedClazz = elem ? ' selected' : '';\n    return (\n        <div className=\"film-details\">\n            <div>\n                <div className={clazz + selectedClazz}\n                     onClick={() => updateSelectedFilms({id, title, rating})}>\n                    <i className=\"fa fa-bookmark\" aria-hidden=\"true\" /></div>\n                <div className=\"film-rating\">{rating}</div>\n                <img className=\"film-poster\" src={poster || defaultPoster} alt=\"poster\"/>\n                <div className=\"film-info\">\n                    <h1 className=\"film-title\">{title}</h1>\n                    <div className=\"film-tagline\">{tagline}</div>\n                    <table>\n                        <tbody>\n                        <tr>\n                            <td>year</td>\n                            <td>{year}</td>\n                        </tr>\n                        <tr>\n                            <td>country</td>\n                            <td>{productionCountries}</td>\n                        </tr>\n                        <tr>\n                            <td>genre</td>\n                            <td>{genres}</td>\n                        </tr>\n                        <tr>\n                            <td>budget</td>\n                            <td>{budget}</td>\n                        </tr>\n                        <tr>\n                            <td>box office</td>\n                            <td>{revenue}</td>\n                        </tr>\n                        <tr>\n                            <td>runtime</td>\n                            <td>{runtime}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <div className=\"film-overview\">{overview}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nclass FilmDetailsContainer extends Component {\n    componentDidMount() {\n        const { fetchDetails, id } = this.props;\n        fetchDetails(id);\n    }\n\n    render() {\n        const { loading, error, ...props } = this.props;\n        const spinner = loading ? <Spinner /> : null;\n        const errorMessage = error ? <p>page not found</p> : null;\n        const filmDetails = !loading && !error ? <FilmDetails {...props} /> : null;\n        return (\n            <>\n                {spinner}\n                {errorMessage}\n                {filmDetails}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = ({ filmDetails: { loading, error, film}, selectedFilms }) => {\n    return {\n        loading,\n        error,\n        film,\n        selectedFilms\n    }\n}\n\nconst mapDispatchToProps = (dispatch, { mdbService }) => {\n    return {\n        fetchDetails: fetchDetails(mdbService, dispatch),\n        updateSelectedFilms: updateSelectedFilms(dispatch)\n    }\n}\n\nexport default compose(\n    withMdbService(),\n    connect(mapStateToProps, mapDispatchToProps)\n)(FilmDetailsContainer);","import FilmDetails from './film-details';\nexport default FilmDetails;","import App from './app';\nexport default App;","import React, { useEffect } from 'react';\nimport {Route, Switch, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../header';\nimport ArrowUp from '../arrow-up';\nimport { MainPage, PopularPage, TopRatedPage, UpcomingPage, SearchPage, SelectedPage } from '../mdb-pages';\nimport FilmDetails from '../film-details';\nimport { compose } from '../../utils';\nimport { updateCurrentPath } from '../../actions';\n\nimport './app.sass';\n\nconst App = ({ location, updateCurrentPath }) => {\n    useEffect(() => {\n        updateCurrentPath(location.pathname);\n    });\n\n    return (\n        <div className=\"app-block\">\n            <Header />\n            <Switch>\n                <Route path='/' exact component={MainPage} />\n                <Route path='/popular' component={PopularPage} />\n                <Route path='/top_rated' component={TopRatedPage} />\n                <Route path='/upcoming' component={UpcomingPage} />\n                <Route path='/selected' component={SelectedPage} />\n                <Route path='/search&q=:id'\n                       render={({match}) => {\n                           const { id } = match.params;\n                           return <SearchPage searchQuery={id} />\n                       }} />\n                <Route path=\"/movie/:id\"\n                       render={({match}) => {\n                           const { id } = match.params;\n                           return <FilmDetails id={id} />\n                       }} />\n                <Route render={() => <p className=\"message\">page not found</p>} />\n            </Switch>\n            <ArrowUp />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateCurrentPath: updateCurrentPath(dispatch)\n    }\n}\n\nexport default compose(\n    withRouter,\n    connect( null, mapDispatchToProps)\n)(App);","export default __webpack_public_path__ + \"static/media/error.b008d990.png\";","import ErrorIndicator from './error-indicator';\nexport default ErrorIndicator;","import React from 'react';\n\nimport './error-indicator.sass';\nimport errorLogo from './error.png';\n\nconst ErrorIndicator = () => {\n    return (\n        <div className=\"error-message\">\n            <img src={errorLogo} alt=\"error\"/>\n            <p>oops! something went wrong</p>\n            <p>please, try again late</p>\n        </div>\n    )\n}\n\nexport default ErrorIndicator;","import ErrorBoundary from './error-boundary';\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nimport ErrorIndicator from '../error-indicator';\n\nexport default class ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch() {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <ErrorIndicator />\n        }\n\n        return this.props.children;\n    }\n}","//чисто\nconst updateFilmList = (state, action) => {\n    const initialValue = {\n        films: [],\n        loading: true,\n        error: null\n    }\n\n    if(state === undefined) {\n        return initialValue;\n    }\n\n    const { films } = state.filmList;\n\n    switch (action.type) {\n        case 'FETCH_FILMS_REQUEST':\n            return {\n                films: [...films],\n                loading: true,\n                error: null\n            }\n        case 'FETCH_FILMS_SUCCESS':\n            return {\n                films: [...films, ...action.payload],\n                loading: false,\n                error: null\n            }\n        case 'FETCH_FILMS_FAILURE':\n            return {\n                films: [],\n                loading: false,\n                error: action.payload\n            }\n        case 'DELETE_FILMS':\n            return initialValue;\n        default:\n            return state.filmList;\n    }\n}\n\nexport default updateFilmList;","const updateFilmDetails = (state, action) => {\n    const initialValue = {\n        film: null,\n        loading: true,\n        error: null\n    }\n\n    if(state === undefined) {\n        return initialValue;\n    }\n\n    switch (action.type) {\n        case 'FETCH_DETAILS_REQUEST':\n            return initialValue;\n        case 'FETCH_DETAILS_SUCCESS':\n            return {\n                film: action.payload,\n                loading: false,\n                error: null\n            }\n        case 'FETCH_DETAILS_FAILURE':\n            return {\n                film: null,\n                loading: false,\n                error: action.payload\n            }\n        default:\n            return state.filmDetails;\n    }\n}\n\nexport default updateFilmDetails;","const updateQueryButtons = (state, action) => {\n    if(state === undefined) {\n        return [\n            {name: 'popular', path: '/popular', isChosen: false},\n            {name: 'top rated', path: '/top_rated', isChosen: true},\n            {name: 'upcoming', path: '/upcoming', isChosen: false}\n        ]\n    }\n\n    const { queryButtons } = state;\n\n    const oldItem = queryButtons.find(({ isChosen }) => isChosen === true );\n    const oldIdx = queryButtons.indexOf(oldItem);\n    const clearArr = updateButton(queryButtons, oldIdx);\n\n    if(action.type === 'UPDATE_CURRENT_PATH') {\n        const chosenItem = queryButtons.find(({ path }) => path === action.payload);\n        const newIdx = queryButtons.indexOf(chosenItem);\n        return updateButton(clearArr, newIdx);\n    }\n\n    return queryButtons;\n}\n\nconst updateButton = (arr, idx) => {\n    if(idx === -1) {\n        return arr\n    }\n    return [\n        ...arr.slice(0, idx),\n        { ...arr[idx], isChosen: !arr[idx].isChosen },\n        ...arr.slice(idx + 1)\n    ]\n}\n\nexport default updateQueryButtons;","const updateSelectedFilms = (state, action) => {\n    if(state === undefined) {\n        return [];\n    }\n    const { selectedFilms } = state;\n\n    switch(action.type) {\n        case 'UPDATE_SELECTED_FILMS':\n            return updateList(selectedFilms, action.payload);\n        case 'REMOVE_SELECTED_FILM':\n            return removeFilm(selectedFilms, action.payload);\n        case 'REMOVE_ALL_SELECTED_FILMS':\n            return [];\n        default:\n            return selectedFilms;\n    }\n}\n\nconst removeFilm = (selectedList, filmId) => {\n    const film = selectedList.find(({id}) => id === filmId);\n    const idx = selectedList.indexOf(film);\n    return [\n        ...selectedList.slice(0, idx),\n        ...selectedList.slice(idx + 1)\n    ]\n}\n\nconst updateList = (selectedList, selectedFilm) => {\n    const film = selectedList.find(({id}) => id === selectedFilm.id);\n    const idx = selectedList.indexOf(film);\n\n    if (idx > -1) {\n        return [\n            ...selectedList.slice(0, idx),\n            ...selectedList.slice(idx + 1)\n        ]\n    }\n\n    return [...selectedList, selectedFilm]\n}\n\nexport default updateSelectedFilms;","const updateTotalPages = (state, action) => {\n\n    if(state === undefined) {\n        return {\n            getPopular: null,\n            getTopRated: null,\n            getUpcoming: null,\n            getBySearch: null\n        }\n    }\n\n    const { totalPages } = state;\n\n    if(!action.type.includes('FETCH_TOTAL_PAGES')) {\n        return totalPages\n    }\n\n    const key = Object.keys(action.payload)[0];\n    const value = Object.values(action.payload)[0];\n\n    return { ...totalPages, [key]: value }\n}\n\nexport default updateTotalPages;","import updateFilmList from './film-list';\nimport updateFilmDetails from './film-details';\nimport updateQueryButtons from './query-buttons';\nimport updateSelectedFilms from './selected-films';\nimport updateTotalPages from './total-pages';\n\nconst reducer = (state, action) => {\n    return {\n        filmList: updateFilmList(state, action),\n        filmDetails: updateFilmDetails(state, action),\n        queryButtons: updateQueryButtons(state, action),\n        selectedFilms: updateSelectedFilms(state, action),\n        totalPages: updateTotalPages(state, action)\n    }\n}\n\nexport default reducer;","import { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/app';\nimport ErrorBoundary from './components/error-boundary';\nimport MdbServiceContext from './components/mdb-service-context';\nimport MdbService from './services/mdb-service';\n\nimport store from './store';\n\nconst mdbService = new MdbService();\n\nReactDOM.render(\n    <Provider store={store}>\n        <ErrorBoundary>\n            <MdbServiceContext.Provider value={ mdbService }>\n                <Router>\n                    <App />\n                </Router>\n            </MdbServiceContext.Provider>\n        </ErrorBoundary>\n    </Provider>,\n    document.getElementById('root'));","export default class MdbService {\n    _apiBase = 'https://api.themoviedb.org/3/movie/';\n    _apiBasePopular = 'https://api.themoviedb.org/3/movie/popular?';\n    _apiBaseTopRated = 'https://api.themoviedb.org/3/movie/top_rated?';\n    _apiBaseUpcoming = 'https://api.themoviedb.org/3/movie/upcoming?';\n    _apiBaseBySearch = 'https://api.themoviedb.org/3/search/movie?';\n    _apiKey = 'api_key=f24a0fd18f52218851075901c5a108a0';\n    _imgBase = 'https://image.tmdb.org/t/p/w500';\n\n    getResource = async(url) => {\n        const res = await fetch(url);\n        if(!res.ok) {\n            throw new Error(`Could not fetch ${url}, received ${res.status}`)\n        }\n        return await res.json();\n    }\n\n    getData = (base, page, query) => async() => {\n        const url = this._getQueryUrl(base, page, query);\n        const res = await this.getResource(url);\n        return res.results.map(this._transformMovie);\n    }\n\n    getTotalPages = async (func, query) => {\n        let apiBase;\n        switch(func) {\n            case('getPopular'):\n                apiBase = this._apiBasePopular;\n                break;\n            case('getTopRated'):\n                apiBase = this._apiBaseTopRated;\n                break;\n            case('getUpcoming'):\n                apiBase = this._apiBaseUpcoming;\n                break;\n            case('getBySearch'):\n                apiBase = this._apiBaseBySearch;\n                break;\n            default:\n                return new Error(`Impossible to determine the apiBase for fetching total pages`);\n        }\n        const data = await this.getResource(\n            this._getQueryUrl(apiBase,1, query));\n\n        return data.total_pages\n    }\n\n    /* Названия функций getPopular, getTopRated, getUpcoming, getBySearch указаны строкой в:\n        1) reducers/query-buttons.js\n        2) reducers/total-pages.js\n        3) mdb-pages/index.js\n    */\n    getPopular = async(page) => {\n        return this.getData(this._apiBasePopular, page)();\n    }\n\n    getTopRated = async(page) => {\n        return this.getData(this._apiBaseTopRated, page)();\n    }\n\n    getUpcoming = async(page) => {\n        return this.getData(this._apiBaseUpcoming, page)();\n    }\n\n    getBySearch = (page, query) => {\n        return this.getData(this._apiBaseBySearch, page, query)();\n    }\n\n    getMovieDetails = async(id) => {\n        const url = `${this._apiBase}${id}?${this._apiKey}`;\n        const res = await this.getResource(url);\n        return this._transformMovieDetails(res);\n    }\n\n    _getQueryUrl = (base, page, query) => {\n        const url = `${base}${this._apiKey}&page=${page}`;\n        return !query ? url : `${url}&query=${query}`;\n    }\n\n    _transformMovie = (movie) => {\n        const {id, title, vote_average, poster_path, release_date} = movie;\n        return {\n            id,\n            title,\n            rating: this._transformRating(vote_average),\n            poster: this._transformPoster(poster_path),\n            release: release_date ? this._transformDate(release_date) : 'unknown'\n        }\n    }\n\n    _transformMovieDetails = (movie) => {\n        const {id, title, tagline, revenue, budget, runtime, overview,\n            vote_average, genres, release_date, production_countries, poster_path} = movie;\n\n        return {\n            id,\n            title,\n            tagline,\n            overview,\n            revenue: revenue ? `$${revenue}` : 'unknown',\n            budget: budget ? `$${budget}` : 'unknown',\n            runtime: runtime ? `${runtime} minutes` : 'unknown',\n            rating: this._transformRating(vote_average),\n            genres: this._transformPropToString(genres).toLowerCase(),\n            year: release_date.substring(0, 4) || 'unknown',\n            productionCountries: this._transformPropToString(production_countries),\n            poster: this._transformPoster(poster_path)\n        }\n    }\n\n    _transformPoster = (poster) => {\n        return poster ? this._imgBase + poster : poster;\n    }\n\n    _transformDate = (date) => {\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        date = date.split('-').reverse();\n        date[1] = months[date[1] - 1]\n        return date.join(' ');\n    }\n\n    _transformPropToString = (arr) => {\n        if(arr.length === 0) {\n            return 'unknown';\n        }\n        return arr.map(({name}) => name).join(', ');\n    }\n\n    _transformRating = (rating) => {\n        if(!rating) {\n            return 'NR';\n        } else if(rating === Math.floor(rating)) {\n            return `${rating}.0`;\n        } else {\n            return rating;\n        }\n    }\n}\n"],"sourceRoot":""}